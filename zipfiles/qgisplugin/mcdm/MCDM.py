# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MCDM
                                 A QGIS plugin
 This plugin is provide facilitates to work eith vector and raster files to find a suitable place to establish solar farm in New Mexico, United States
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Prasadi Senadeera
        email                : prasadisenadeera1991@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.gui import *
from qgis.core import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QComboBox
from osgeo import gdal
from osgeo.gdalconst import *
from osgeo import osr

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .MCDM_dialog import MCDMDialog

#Import other modules
import os.path
import processing
import tempfile
import numpy as np
from numpy import *
import os

#import tools in to main Module

from .Reclassify import Reclassify
from .VectorClip import VectorClip
from .RasterClip import RasterClip
from .RasterDistance import RasterDistance
from .Rasterize import Rasterize
from .Resample import Resample
from .LC_Reclassify import LC_Reclassify


class MCDM:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MCDM_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Multi Criteria Decision Maker')
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MCDM', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/MCDM/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MCDM'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Multi Criteria Decision Maker'),
                action)
            self.iface.removeToolBarIcon(action)


    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select output file ","", '*.tif')
        self.dlg.lineEdit.setText(filename)
    
    def layerAsArray(self,layer):
        gd = gdal.Open(str(layer.source()))
        Array = gd.ReadAsArray()
        return Array
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MCDMDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox and lineedit from previous runs
        self.dlg.mMapLayerComboBox_1.clear()
        #self.dlg.lineEdit.clear()
        # Populate the comboBoxes with names of all the loaded layers
        self.dlg.mMapLayerComboBox_1.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_2.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_3.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_4.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_5.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_6.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox_7.addItems([layer.name() for layer in layers])
        self.dlg.mMapLayerComboBox.addItems([layer.name() for layer in layers])

# show the dialog
        self.dlg.show()
# Run the dialog event loop
        result = self.dlg.exec_()
# See if OK was pressed
        if result:

#getting the boundary
            Boundary = self.dlg.mMapLayerComboBox.currentText()
            V_Boundary = QgsProject().instance().mapLayersByName(Boundary)[0]

#getting the browsed file name
            filename = self.dlg.lineEdit.text()

#getting the final output resolution
            PixelSize=int(self.dlg.spinBox_8.value())

# Road network  
            
    #Retrieving values from interface
            Road = self.dlg.mMapLayerComboBox_1.currentText()
            V_Road = QgsProject().instance().mapLayersByName(Road)[0]
            Road_O = str(self.dlg.comboBox.currentText())
            Road_W =int(self.dlg.spinBox.value())
            name='Road'
            
    #Applying tools
            V_Road_Clip=VectorClip(V_Road,V_Boundary)
            R_Road,Location=Rasterize(V_Road_Clip,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            R_Road_distance=RasterDistance(R_Road)
            R_Road_D_Clip=RasterClip(R_Road_distance,V_Boundary)
            RRoadDC_Reclass,Location=Reclassify(R_Road_D_Clip,Road_O)
    #Display to check the process
            #self.iface.addRasterLayer(Location, "reclassify")

            
# Transmission lines
    #Retrieving values from interface
            Transmission = self.dlg.mMapLayerComboBox_2.currentText()
            V_Transmission = QgsProject().instance().mapLayersByName(Transmission)[0]
            Transmis_O = str(self.dlg.comboBox_2.currentText())
            Transmis_W =int(self.dlg.spinBox_2.value())
            name='Transmission'

    #Applying tools
            V_Transmission_Clip=VectorClip(V_Transmission,V_Boundary)
            R_Trasmission,Location=Rasterize(V_Transmission_Clip,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            RT_Distance=RasterDistance(R_Trasmission)
            RTD_Clip=RasterClip(RT_Distance,V_Boundary)
            RTrans_DC_Reclass,Location=Reclassify(RTD_Clip,Transmis_O)

    #Display to check the process
            #self.iface.addRasterLayer(Location, "reclassify")

            
# Restrcited Lands
    #Retrieving values from interface

            Restric_Land = self.dlg.mMapLayerComboBox_3.currentText()
            V_Restric_Land = QgsProject().instance().mapLayersByName(Restric_Land)[0]
            name='RestrictLand'

    #Applying tools
            V_Restric_Land_Clip=VectorClip(V_Restric_Land,V_Boundary)
            R_Restric_Land,Location= Rasterize(V_Restric_Land_Clip,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            R_Restric_Land_clip=RasterClip(R_Restric_Land,V_Boundary)
            
# Land Cover
    #Retrieving values from interface
            LandCover = self.dlg.mMapLayerComboBox_4.currentText()
            V_LandCover = QgsProject().instance().mapLayersByName(LandCover)[0]
            LandC_O = str(self.dlg.comboBox_4.currentText())
            LandC_W =int(self.dlg.spinBox_4.value())
            name='LandCover'
            

    #Applying tools
            R_LandCo,Location=Rasterize(V_LandCover,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            R_LandCo_reclass,Location=LC_Reclassify(R_LandCo,LandC_O)
            #self.iface.addRasterLayer(Location, "reclassify")
            
# Population density
    #Retrieving values from interface
            Pop_De= self.dlg.mMapLayerComboBox_5.currentText()
            V_PopDe = QgsProject().instance().mapLayersByName(Pop_De)[0]
            PopDe_O = str(self.dlg.comboBox_5.currentText())
            PopDe_W =int(self.dlg.spinBox_5.value())
            name='PopDe'

    #Applying tools    
            R_PopDe,Location= Rasterize(V_PopDe,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            R_PopDe_Reclass,Location=Reclassify(R_PopDe,PopDe_O)

    #Display to check the process
            #self.iface.addRasterLayer(Location, "reclassify")
            
# Solar resource potential 
    #Retrieving values from interface
            Solar = self.dlg.mMapLayerComboBox_6.currentText()
            V_Solar = QgsProject().instance().mapLayersByName(Solar)[0]
            Solar_O = str(self.dlg.comboBox_6.currentText())
            Solar_W =int(self.dlg.spinBox_6.value())
            name='Solar'
            
    #Applying tools 
            R_Solar,Location=Rasterize(V_Solar,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")      
            R_Solar_Mex= RasterClip(R_Solar,V_Boundary)
            R_Solar_Reclass,Location=Reclassify(R_Solar_Mex,Solar_O)

#Display to check the process
            #self.iface.addRasterLayer(Location, "reclassify")
            
            
#City centroids
    #Retrieving values from interface
            City = self.dlg.mMapLayerComboBox_7.currentText()
            V_City = QgsProject().instance().mapLayersByName(City)[0] 
            City_O = str(self.dlg.comboBox_7.currentText())
            City_W =int(self.dlg.spinBox_7.value())
            name='CityCen'
            
    #Applying tools  
            R_City,Location=Rasterize(V_City,V_Boundary,name)
            #self.iface.addRasterLayer(Location, "Rasterisation")
            RCdistance=RasterDistance(R_City)
            RCD_clip=RasterClip(RCdistance,V_Boundary)
            RCDC_reclassify,Location=Reclassify(RCD_clip,City_O)
            
    #Display to check the process
            #self.iface.addRasterLayer(Location, "reclassify")
        
            
#Call weighted Overlay

    #make a list with final reclassified layers and weights

            a=[RRoadDC_Reclass,RTrans_DC_Reclass,R_LandCo_reclass,R_PopDe_Reclass,R_Solar_Reclass,RCDC_reclassify]
            b=[Road_W,Transmis_W,LandC_W,PopDe_W,Solar_W,City_W]

    #Convert qgs Raster Layers to numpy arrays
            A_Road=self.layerAsArray(RRoadDC_Reclass)
            A_Transmission=self.layerAsArray(RTrans_DC_Reclass)
            A_LandCo=self.layerAsArray(R_LandCo_reclass)
            A_PopDe=self.layerAsArray(R_PopDe_Reclass)
            A_Solar=self.layerAsArray(R_Solar_Reclass)
            A_CityCe=self.layerAsArray(RCDC_reclassify)
            A_Restrict=self.layerAsArray(R_Restric_Land_clip)

    #Sum of weights
            Total_weight=(Road_W+Transmis_W+LandC_W+PopDe_W+Solar_W+City_W)

    #Weighted sum
            A_Final=(Road_W*A_Road+Transmis_W*A_Transmission+LandC_W*A_LandCo+PopDe_W*A_PopDe+A_Solar*Solar_W+City_W*A_CityCe)/Total_weight

    #Remove restricted Lands from weighted overlay
            rows = A_Final.shape[0]
            cols = A_Final.shape[1]
            Final = np.zeros(shape=(rows,cols))
            for x in range(0, rows):
                for y in range(0, cols):
                    if A_Restrict[x,y]==1:
                        Final[x,y]=0
                    else:
                        Final[x,y]=A_Final[x,y]


    #Create new file to write the numpy output as a raster
            gdal_RCDC_reclassify = gdal.Open(RCDC_reclassify.source())
            driver = gdal.GetDriverByName("GTiff")
            file2 = driver.Create(filename,RCDC_reclassify.width(),RCDC_reclassify.height() ,1)
            
    #Fetching the spatial refrence and Geo transforms to new file
            file2.SetGeoTransform(gdal_RCDC_reclassify.GetGeoTransform())
            spatial_reference = osr.SpatialReference()
            spatial_reference.ImportFromEPSG(4151)
            file2.SetProjection(spatial_reference.ExportToWkt())
            file2.GetRasterBand(1).WriteArray(Final)

    #Displaying Final Layer in qgs interface
            rlayer = QgsRasterLayer(filename, "MCDM output")
            QgsProject.instance().addMapLayer(rlayer)
            #self.iface.addRasterLayer(rlayer)

    #End of the program
            self.iface.messageBar().pushMessage("Success", "Output file written at " + filename,
            level=Qgis.Success, duration=3)
        

           


            
            
            
            
            
       
